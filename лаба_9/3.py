"""
Суровцев Денис ИУ7-14Б
Подсчитать в каждой строке матрицы D количество элементов, превышающих
суммы элементов соответствующих строк матрицы Z. Разместить эти
количества в массиве G, умножить матрицу D на максимальный элемент
массива G. Напечатать матрицу Z, матрицу D до и после преобразования, а
также массив G.
"""

n_d, m_d = map(int, input("Введите положительные числа количества строк и столбцов матрицы D через пробел: ").split())

while n_d <= 0 or m_d <= 0:
    print('Введено неположительное число! Повторите попытку')
    n_d, m_d = map(int, input("Введите положительные числа количества строк и столбцов матрицы D через пробел: ").split())

D = []  # Переменная для матрицы
print("Введите целочисленные элементы строки матрицы через пробел: ")
for i in range(n_d):
    temp_arr = list(map(int, input().split()))
    while len(temp_arr) != m_d:
        print(f"Было введено {len(temp_arr)} элементов! Необходимо вводить {m_d} элемента")
        print("Введите заново данную сточку")
        temp_arr = list(map(int, input().split()))
    D.append(temp_arr)

n_z, m_z = map(int, input("Введите положительные числа количества строк и столбцов матрицы Z через пробел: ").split())

while n_z <= 0 or m_z <= 0:
    print('Введено неположительное число! Повторите попытку')
    n_z, m_z = map(int, input("Введите положительные числа количества строк и столбцов матрицы Z через пробел: ").split())

Z = []  # Переменная для матрицы
print("Введите целочисленные элементы строки матрицы через пробел: ")
for i in range(n_z):
    temp_arr = list(map(int, input().split()))
    while len(temp_arr) != m_z:
        print(f"Было введено {len(temp_arr)} элементов! Необходимо вводить {m_z} элемента")
        print("Введите заново данную сточку")
        temp_arr = list(map(int, input().split()))
    Z.append(temp_arr)
# Список для количества элементов, превышающих суммы элементов соответствующих строк матрицы Z
G = []
for i in range(min(n_d, n_z)):
    row_D = D[i]  # Строка матрицы D
    row_Z = Z[i]  # Строка матрицы Z
    sum_row_Z = sum(row_Z)  # сумма элементов строки матрицы Z
    cnt = 0  # Счетчик количества элементов, превышающих суммы элементов соответствующих строк матрицы Z
    for item in row_D:
        if item > sum_row_Z:
            cnt += 1

    G.append(cnt)  # Добавление в список G

D_old = [row[:] for row in D]  # Копирование исходной матрицы D
max_G = max(G)  # Нахождение максимального элемента списка G
for i in range(n_d):
    for j in range(m_d):
        D[i][j] *= max_G  # Умножение элемента матрицы D на максимальный элемент массива G

print('Матрица Z')
for i in range(n_z):
    for j in range(m_z):
        print(f'{Z[i][j]:^7}', end="")
    print()

print('Матрица D до преобразований')
for i in range(n_d):
    for j in range(m_d):
        print(f'{D_old[i][j]:^7}', end="")
    print()

print('Матрица D после преобразований')
for i in range(n_d):
    for j in range(m_d):
        print(f'{D[i][j]:^7}', end="")
    print()

print("Список G:", end=" ")
for i in range(len(G)):
    print(G[i], end=" ")
